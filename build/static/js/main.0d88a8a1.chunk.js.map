{"version":3,"sources":["components/ImageItem.tsx","components/ImageList.tsx","services/imageService.ts","hooks/useImages.ts","components/SearchBar.tsx","assets/logo.png","components/Header.tsx","components/Spinner.tsx","pages/Home.tsx","hooks/useInfiniteScroll.ts","hooks/useLikeToggle.ts","hooks/filterImages.ts","App.tsx","index.tsx"],"names":["ImageItem","image","onLikeToggle","useState","liked","isLiked","setIsLiked","className","price","toFixed","style","fontSize","src","main_attachment","big","alt","title","toUpperCase","author","onClick","id","color","likes_count","ImageList","images","map","index","isProduction","process","fetchImages","page","a","console","log","fetch","response","ok","Error","json","toggleLike","warn","status","method","useImages","setImages","loading","setLoading","error","setError","data","fetchImagesService","prevImages","useEffect","SearchBar","onSearch","query","setQuery","type","placeholder","value","onChange","e","target","onKeyDown","Header","handleSearch","logo","Spinner","Home","searchQuery","setSearchQuery","setPage","handleScroll","window","scrollY","innerHeight","document","documentElement","scrollHeight","prevPage","addEventListener","removeEventListener","useInfiniteScroll","handleLikeToggle","updatedImages","Number","useLikeToggle","filteredImages","lowerQuery","toLowerCase","filter","includes","toString","filterImages","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0d88a8a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { FaThumbsUp, FaRedoAlt } from 'react-icons/fa';\r\nimport 'animate.css';\r\n\r\ninterface ImageItemProps {\r\n    image: {\r\n        id: number;\r\n        title: string;\r\n        main_attachment: { big: string; small: string };\r\n        liked: boolean;\r\n        likes_count: number;\r\n        author: string;\r\n        price: number;\r\n    };\r\n    onLikeToggle: (id: number) => void;\r\n}\r\n\r\nconst ImageItem: React.FC<ImageItemProps> = ({ image, onLikeToggle }) => {\r\n     // Estado local para gestionar el 'like' de la imagen\r\n    const [isLiked, setIsLiked] = useState(image.liked); \r\n\r\n    const handleLikeClick = () => {\r\n        // Cambia el estado de 'liked'\r\n        setIsLiked(!isLiked); \r\n        // Ejecuta la función para notificar el cambio \r\n        onLikeToggle(image.id); \r\n    };\r\n\r\n    return (\r\n        <div className=\"image-item\">\r\n            <div className=\"price-tag\">\r\n                {image.price.toFixed(2)} <span style={{ fontSize: '10px' }}>€</span>\r\n            </div>\r\n            <img src={image.main_attachment.big} alt={image.title} />\r\n            <div className=\"image-info\">\r\n                <h3>{image.title.toUpperCase()}</h3>\r\n                <p>by {image.author}</p>\r\n            </div>\r\n            <div className=\"icon-section\">\r\n                <div className=\"like-section\">\r\n                    <FaThumbsUp\r\n                        className={`like-icon ${isLiked ? 'animate__animated animate__heartBeat' : ''}`} \r\n                        onClick={handleLikeClick}\r\n                        // Cambia a verde si está \"liked\"\r\n                        style={{ color: isLiked ? '#11e968' : '#fff' }} \r\n                    />\r\n                    <span style={{ color: '#fff' }}>00{image.likes_count}</span>\r\n                </div>\r\n                <div className=\"reload-section\">\r\n                    <FaRedoAlt className=\"reload-icon\" />\r\n                    <span style={{ color: '#fff' }}>000</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageItem;\r\n","import React from 'react';\r\nimport ImageItem from './ImageItem'; \r\n\r\ninterface ImageListProps {\r\n    images: any[];\r\n    onLikeToggle: (id: number) => void;\r\n}\r\n\r\nconst ImageList: React.FC<ImageListProps> = ({ images, onLikeToggle }) => {\r\n    return (\r\n        <div className=\"image-list\">\r\n            {images.map((image, index) => (\r\n                <ImageItem key={index} image={image} onLikeToggle={onLikeToggle} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageList;\r\n","const isProduction = process.env.NODE_ENV === 'production';\r\n\r\n\r\nexport const fetchImages = async (page: number) => {\r\n  let response;\r\n\r\n  if (isProduction) {\r\n    // En producción, usa el archivo JSON estático\r\n    console.log('estoy en produccion....',isProduction);\r\n    response = await fetch(`${process.env.PUBLIC_URL}/data.json`);\r\n  } else {\r\n    console.log('estoy en desarrollo');\r\n    // En desarrollo, usa la API mock\r\n    response = await fetch(`http://localhost:3100/images?page=${page}`);\r\n  }\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Error al obtener imágenes');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const toggleLike = async (id: number) => {\r\n  if (isProduction) {\r\n    // En producción, no hay API para manejar likes, por lo que simularemos la respuesta\r\n    console.warn(`Simulando el toggle de like para la imagen con ID ${id} en producción.`);\r\n    return { status: 204 }; // Simular un status de éxito\r\n  } else {\r\n     console.log('like estoy en desarrollo ');\r\n    // En desarrollo, usa la API mock\r\n    const response = await fetch(`http://localhost:3100/images/${id}/likes`, {\r\n      method: 'POST',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Error al realizar el like');\r\n    }\r\n    return response;\r\n  }\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { fetchImages as fetchImagesService } from '../services/imageService';\r\n\r\n/**\r\n * Tipo que representa la estructura de cada imagen.\r\n */\r\ntype Image = {\r\n  type: string;\r\n  id: number;\r\n  title: string;\r\n  author: string;\r\n  created_at: string;\r\n  main_attachment: {\r\n    big: string;\r\n    small: string;\r\n  };\r\n  likes_count: number;\r\n  liked: boolean;\r\n  links: {\r\n    rel: string;\r\n    uri: string;\r\n    methods: string;\r\n  }[];\r\n};\r\n\r\n/**\r\n * Hook que maneja la lógica de obtener imágenes desde la API y simular la carga infinita.\r\n * \r\n * @param {number} page - Número de página para la paginación.\r\n * @returns {object} - Un objeto que contiene las imágenes, estado de carga, errores y función de obtención de imágenes.\r\n */\r\nconst useImages = (page: number) => {\r\n  const [images, setImages] = useState<Image[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchImages = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      let data: Image[] = [];\r\n      if (page === 1) {\r\n        // Primera carga desde la API\r\n        data = await fetchImagesService(page);\r\n        setImages(data);\r\n      } else {\r\n        // Añadir las mismas imágenes para simular el scroll infinito\r\n        setImages((prevImages) => [...prevImages, ...prevImages]);\r\n      }\r\n    } catch (err) {\r\n      setError('Error al obtener las imágenes');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchImages();\r\n  }, [page]);\r\n\r\n  return { images, loading, error, setImages, fetchImages };\r\n};\r\n\r\nexport default useImages;\r\n","import React, { useState } from \"react\";\r\nimport { IoIosSearch } from \"react-icons/io\";\r\n\r\ninterface SearchBarProps {\r\n  onSearch?: (query: string) => void;\r\n}\r\n\r\nexport const SearchBar: React.FC<SearchBarProps> = ({ onSearch }) => {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const handleSearch = () => {\r\n    if (onSearch) {\r\n      console.log('query.....', query);\r\n      onSearch(query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-bar\">\r\n      <IoIosSearch className=\"search-icon\" />\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"You're looking for something?\" \r\n        value={query} \r\n        onChange={(e) => setQuery(e.target.value)} \r\n        onKeyDown={() =>  handleSearch()} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.ccf30e6a.png\";","import { SearchBar } from \"./SearchBar\";\r\nimport logo from \"../assets/logo.png\";\r\n\r\ninterface HeaderProps {\r\n  handleSearch: (query: string) => void;\r\n}\r\n\r\nexport const Header = ({ handleSearch }: HeaderProps) => {\r\n  return (\r\n    <header className=\"header\">\r\n       <img src={logo} alt=\"Logo\" className=\"logo\"  />\r\n      <SearchBar onSearch={handleSearch} />\r\n    </header>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\n\r\nconst Spinner: React.FC = () => {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"spinner\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import { useState } from 'react';\r\nimport ImageList from '../components/ImageList';\r\nimport useImages from '../hooks/useImages';\r\nimport { Header } from '../components/Header';\r\nimport Spinner from '../components/Spinner';\r\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll';\r\nimport { useLikeToggle } from '../hooks/useLikeToggle';\r\nimport { filterImages } from '../hooks/filterImages';\r\n\r\nexport const Home = () => {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [page, setPage] = useState(1);\r\n\r\n  // Ahora `fetchImages` está disponible para usarlo en `useInfiniteScroll`\r\n  const { images, loading, error, setImages, fetchImages } = useImages(page);\r\n\r\n  // Lógica de scroll infinito\r\n  useInfiniteScroll(loading, fetchImages, page, setPage);\r\n\r\n  // Lógica de like/unlike\r\n  const handleLikeToggle = useLikeToggle(images, setImages);\r\n\r\n  // Filtrar imágenes\r\n  const filteredImages = filterImages(images, searchQuery);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Header handleSearch={setSearchQuery} />\r\n      <ImageList images={filteredImages} onLikeToggle={handleLikeToggle} />\r\n      {loading && <Spinner />}\r\n      {error && <p>Error: {error}</p>}\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\n\r\n/**\r\n * Hook que maneja el scroll infinito. Escucha el evento de scroll y, \r\n * cuando el usuario llega al final de la página, incrementa el valor de `page`\r\n * y ejecuta la función `fetchImages` para cargar más imágenes.\r\n * \r\n * @param {boolean} loading - Indica si las imágenes están cargando.\r\n * @param {(page: number) => void} fetchImages - Función para obtener las imágenes de la API.\r\n * @param {number} page - Página actual.\r\n * @param {React.Dispatch<React.SetStateAction<number>>} setPage - Función para actualizar el número de página.\r\n */\r\nexport const useInfiniteScroll = (\r\n  loading: boolean,\r\n  fetchImages: (page: number) => void,\r\n  page: number,\r\n  setPage: React.Dispatch<React.SetStateAction<number>>\r\n) => {\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      const scrollY = window.scrollY;\r\n      const windowHeight = window.innerHeight;\r\n      const documentHeight = document.documentElement.scrollHeight;\r\n\r\n      // Si el usuario ha llegado al final de la página y no está cargando imágenes\r\n      if (scrollY + windowHeight >= documentHeight - 100 && !loading) {\r\n        // Incrementa la página y carga más imágenes\r\n        setPage((prevPage) => prevPage + 1);\r\n        fetchImages(page + 1);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, [loading, page, fetchImages, setPage]);\r\n};\r\n","import { toggleLike } from '../services/imageService';\r\n\r\n/**\r\n * Hook que maneja la acción de \"like/unlike\" para las imágenes.\r\n * Envía una petición `POST` a la API y actualiza el estado de las imágenes\r\n * para reflejar el nuevo estado de \"liked\".\r\n * \r\n * @param {any[]} images - Array de imágenes actuales.\r\n * @param {(images: any[]) => void} setImages - Función para actualizar el estado de las imágenes.\r\n * @returns {(id: number) => void} handleLikeToggle - Función para alternar el estado de \"like/unlike\".\r\n */\r\nexport const useLikeToggle = (images: any[], setImages: (images: any[]) => void) => {\r\n  const handleLikeToggle = async (id: number) => {\r\n    try {\r\n      if (process.env.NODE_ENV === 'production') {\r\n        // En producción simulamos el like\r\n        console.warn(`Simulando el toggle de like para la imagen con ID ${id} en producción.`);\r\n      } else {\r\n        console.log('like estoy en desarrollo : ....)');\r\n        // En desarrollo hacemos la llamada real a la API mock\r\n        await toggleLike(id);\r\n      }\r\n\r\n      // Actualizar el estado de las imágenes para reflejar el nuevo estado de \"liked\"\r\n      const updatedImages = images.map(image =>\r\n        Number(image.id) === id ? { ...image, liked: !image.liked, likes_count: image.liked ? image.likes_count - 1 : image.likes_count + 1 } : image\r\n      );\r\n\r\n      setImages(updatedImages);\r\n    } catch (error) {\r\n      console.error('Error al alternar el like:', error);\r\n    }\r\n  };\r\n\r\n  return handleLikeToggle;\r\n};\r\n","/**\r\n * Función que filtra las imágenes en base a la query de búsqueda. \r\n * Realiza una búsqueda sobre el título, autor y precio de cada imagen.\r\n * \r\n * @param {any[]} images - Array de imágenes a filtrar.\r\n * @param {string} searchQuery - Query de búsqueda introducida por el usuario.\r\n * @returns {any[]} - Array de imágenes que coinciden con la búsqueda.\r\n */\r\nexport const filterImages = (images: any[], searchQuery: string) => {\r\n    const lowerQuery = searchQuery.toLowerCase();  \r\n    return images.filter((image) => {\r\n      return (\r\n        // Buscar por título  || Buscar por autor || Buscar por precio\r\n        image.title.toLowerCase().includes(lowerQuery) ||  \r\n        image.author.toLowerCase().includes(lowerQuery) || \r\n        image.price.toString().includes(lowerQuery)  \r\n      );\r\n    });\r\n  };\r\n  ","import React from 'react';\r\nimport { Home } from './pages/Home';\r\nimport './style.css';\r\n\r\nconst App: React.FC = () => {\r\n\r\n  return (\r\n    <Home/>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n); \r\n"],"sourceRoot":""}